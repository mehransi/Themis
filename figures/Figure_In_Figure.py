
import matplotlib.pyplot as plt
from mpl_toolkits.axes_grid1.inset_locator import inset_axes, mark_inset

test_x = [123, 109, 96, 92, 85, 93, 98, 96, 87, 88, 86, 95, 85, 91, 93, 105, 96, 91, 83, 99, 89, 106, 87, 87, 95, 92, 95, 88, 96, 93, 98, 80, 91, 98, 92, 80, 82, 89, 88, 93, 95, 93, 91, 89, 79, 83, 91, 81, 96, 95, 88, 95, 89, 93, 90, 93, 96, 93, 88, 83, 81, 84, 99, 88, 90, 82, 83, 90, 99, 84, 97, 93, 83, 86, 93, 86, 94, 96, 80, 92, 81, 95, 82, 86, 92, 96, 98, 83, 81, 84, 88, 96, 84, 97, 102, 95, 90, 86, 83, 86, 77, 90, 84, 89, 83, 92, 90, 86, 90, 81, 85, 89, 97, 84, 90, 82, 83, 95, 96, 82, 91, 80, 86, 77, 81, 86, 77, 83, 94, 89, 82, 81, 80, 91, 88, 96, 81, 84, 86, 89, 88, 103, 79, 86, 105, 85, 88, 88, 81, 89, 82, 95, 85, 79, 84, 76, 82, 85, 82, 87, 83, 76, 93, 81, 90, 80, 79, 86, 89, 83, 93, 92, 83, 73, 82, 91, 74, 78, 80, 76, 87, 87, 88, 75, 83, 81, 82, 87, 86, 77, 90, 77, 79, 86, 85, 92, 78, 86, 77, 86, 84, 83, 87, 89, 87, 85, 80, 87, 77, 77, 74, 82, 84, 85, 78, 80, 80, 77, 86, 80, 73, 83, 74, 90, 75, 98, 76, 87, 83, 113, 102, 106, 84, 89, 88, 91, 92, 81, 86, 81, 82, 79, 80, 80, 87, 84, 82, 81, 94, 85, 79, 73, 81, 73, 79, 77, 84, 86, 81, 71, 75, 84, 82, 83, 94, 76, 81, 84, 81, 82, 80, 74, 80, 76, 87, 81, 73, 76, 72, 73, 83, 77, 85, 72, 78, 76, 90, 76, 78, 86, 79, 76, 89, 83, 79, 80, 79, 75, 75, 75, 82, 74, 75, 79, 80, 84, 85, 79, 85, 77, 78, 85, 75, 74, 76, 72, 79, 76, 74, 80, 76, 74, 79, 77, 105, 80, 84, 92, 87, 84, 83, 195, 224, 243, 287, 253, 268, 253, 272, 268, 263, 281, 263, 279, 278, 278, 276, 253, 266, 271, 259, 267, 264, 268, 284, 264, 261, 275, 279, 270, 281, 252, 257, 263, 280, 270, 273, 260, 266, 260, 254, 258, 256, 253, 262, 276, 267, 293, 263, 267, 267, 250, 281, 272, 250, 250, 241, 235, 224, 217, 217, 193, 197, 177, 157, 159, 156, 157, 157, 152, 134, 120, 117, 101, 113, 103, 97, 108, 107, 79, 77, 80, 78, 82, 71, 76, 71, 78, 79, 83, 77, 76, 76, 78, 73, 76, 82, 79, 76, 72, 74, 85, 73, 74, 80, 78, 86, 84, 89, 79, 73, 71, 80, 80, 82, 80, 89, 84, 81, 76, 72, 74, 84, 70, 90, 83, 75, 67, 73, 81, 75, 77, 75, 76, 82, 89, 75, 77, 76, 81, 79, 72, 84, 79, 82, 94, 76, 79, 78, 70, 73, 85, 70, 76, 73, 81, 79, 79, 76, 79, 80, 75, 80, 72, 80, 64, 74, 80, 80, 70, 74, 83, 77, 77, 95, 69, 87, 74, 80, 89, 72, 82, 75, 76, 79, 82, 82, 76, 80, 86, 84, 83, 82, 72, 78, 82, 78, 85, 77, 86, 72, 70, 84, 88, 81, 77, 83, 84, 101, 76, 86, 76, 71, 89, 76, 79, 70, 74, 80, 89, 72, 75, 74, 84, 96, 80, 73, 78, 79, 84, 87, 73, 78, 84, 77, 80, 75, 75, 78, 80]
prediction = [107, 118, 116, 107, 100, 94, 94, 98, 99, 94, 92, 90, 94, 91, 92, 94, 102, 101, 97, 91, 96, 95, 102, 96, 93, 95, 95, 97, 94, 96, 97, 99, 91, 92, 97, 96, 89, 86, 89, 90, 93, 96, 96, 95, 93, 87, 86, 90, 87, 93, 96, 94, 96, 94, 95, 94, 95, 97, 97, 94, 90, 86, 86, 94, 93, 93, 89, 87, 90, 97, 92, 96, 96, 91, 90, 93, 91, 94, 97, 90, 92, 88, 93, 89, 89, 92, 96, 99, 93, 88, 87, 89, 94, 91, 95, 101, 100, 97, 92, 89, 89, 84, 88, 88, 90, 88, 91, 93, 91, 92, 88, 88, 90, 95, 92, 92, 88, 87, 92, 96, 91, 92, 88, 88, 84, 83, 86, 83, 84, 91, 92, 88, 86, 84, 89, 90, 95, 90, 88, 88, 90, 91, 99, 91, 89, 99, 95, 92, 91, 88, 89, 87, 93, 91, 86, 86, 82, 83, 86, 85, 88, 87, 83, 89, 87, 90, 87, 84, 86, 89, 88, 92, 94, 90, 82, 83, 89, 83, 81, 82, 80, 85, 88, 90, 84, 84, 84, 85, 87, 88, 84, 88, 84, 83, 86, 87, 91, 86, 87, 84, 86, 87, 86, 88, 90, 90, 89, 86, 88, 84, 81, 79, 82, 85, 87, 84, 83, 83, 81, 85, 84, 80, 83, 80, 86, 83, 92, 86, 88, 87, 102, 106, 109, 98, 94, 92, 93, 94, 89, 88, 86, 85, 83, 83, 83, 86, 87, 86, 85, 91, 90, 86, 80, 82, 79, 80, 80, 84, 87, 85, 79, 78, 82, 84, 85, 91, 86, 84, 86, 85, 85, 84, 80, 81, 80, 85, 85, 80, 79, 77, 76, 81, 81, 84, 80, 80, 79, 86, 83, 82, 85, 84, 81, 87, 87, 84, 83, 83, 80, 79, 78, 82, 79, 78, 80, 82, 84, 87, 84, 86, 83, 82, 85, 82, 79, 79, 77, 79, 79, 78, 80, 80, 78, 80, 80, 94, 89, 88, 92, 91, 89, 87, 191, 246, 267, 313, 276, 279, 269, 272, 274, 271, 279, 275, 279, 282, 283, 283, 270, 270, 274, 270, 271, 271, 272, 271, 276, 271, 272, 279, 280, 283, 271, 266, 268, 278, 278, 279, 273, 272, 270, 265, 264, 264, 261, 265, 274, 275, 288, 280, 276, 275, 265, 276, 279, 268, 261, 254, 247, 238, 230, 226, 212, 206, 194, 177, 169, 165, 163, 163, 160, 149, 136, 128, 116, 116, 112, 107, 109, 111, 97, 88, 85, 84, 85, 80, 80, 77, 79, 81, 84, 82, 81, 80, 81, 78, 79, 82, 82, 81, 78, 77, 83, 80, 78, 80, 81, 85, 87, 90, 86, 81, 77, 79, 81, 83, 83, 88, 88, 86, 82, 78, 77, 82, 78, 85, 86, 82, 75, 75, 79, 79, 79, 79, 79, 82, 87, 83, 81, 80, 82, 82, 78, 82, 83, 84, 91, 86, 83, 82, 77, 76, 82, 78, 78, 77, 80, 81, 82, 80, 81, 82, 80, 81, 78, 80, 73, 74, 79, 81, 77, 77, 81, 81, 80, 90, 82, 85, 81, 82, 87, 81, 83, 80, 79, 81, 83, 84, 82, 82, 86, 87, 86, 86, 80, 80, 82, 82, 85, 83, 86, 80, 76, 81, 87, 86, 83, 84, 86, 96, 88, 88, 83, 78, 85, 82, 82, 77, 77, 80, 86, 81, 79, 78, 82, 91, 88, 81, 80, 81, 84, 87, 82, 81, 84, 82, 82, 80, 79, 80]
c = ['green', 'blue', 'black']
where_from, where_to = 50, 150
how_far = 10

# Given data
# test_x = [123, 109, 96, 92, 85, 93, 98, 96, 87, 88, 86, 95, 85]
# prediction = [107, 118, 116, 107, 100, 94, 94, 98, 99, 94, 92, 90, 94]

# Create a figure and main axes
fig, ax = plt.subplots(figsize=(12, 6))
throughput = [max(prediction)] * where_from
throughput.extend([max(test_x[where_from: where_to])] * len(test_x[where_from: where_to + 1]))
throughput.extend([max(test_x)] * len(prediction[where_to + 1:]))
# Plot the original data
ax.plot(test_x, label='Workload', c=c[0])
ax.plot(prediction[0], '--', label='Throughput', c='black')
ax.plot(prediction, label='Prediction', c=c[1])
ax.plot(throughput, c='w')
# Add titles and labels
# ax.set_title('LSTM ')
ax.set_ylabel('Workload (RPS)')
ax.set_xlabel('Time (second)')
ax.legend(loc='upper right')

# Create inset of the zoomed-in region
axins = inset_axes(ax, width="40%", height="40%", loc="upper left", borderpad=4)

# Plot the zoomed-in data on the inset axes
axins.plot(test_x, label='test_x', c=c[0])
axins.plot(prediction, label='prediction', c=c[1])
axins.plot(throughput, '--', label='throughput', c=c[2])

# Set the zoomed-in region
x1, x2, y1, y2 = (where_from, where_to - 1,
                  min(min(test_x[where_from:where_to]), min(prediction[where_from:where_to])) - how_far,
                  max(max(test_x[where_from:where_to]), max(prediction[where_from:where_to])) + how_far)
axins.set_xlim(x1, x2)
axins.set_ylim(y1, y2)
axins.set_xticks([])
axins.set_yticks([])
mark_inset(ax, axins, loc1=3, loc2=4, fc="none", ec="0.5")

plt.savefig('lstm.pdf', bbox_inches='tight')
plt.show()
